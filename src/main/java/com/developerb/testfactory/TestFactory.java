package com.developerb.testfactory;

import net.bytebuddy.ByteBuddy;
import net.bytebuddy.description.annotation.AnnotationDescription;
import net.bytebuddy.dynamic.DynamicType;
import net.bytebuddy.implementation.MethodDelegation;
import org.junit.Test;

import static net.bytebuddy.description.modifier.Visibility.PUBLIC;
import static net.bytebuddy.dynamic.loading.ClassLoadingStrategy.Default.WRAPPER;

/**
 * Responsible for dynamically generating a test class with @Test annotated
 * methods for each test generated by a TestGenerator.
 */
class TestFactory {

    private int count = 0;

    private DynamicType.Builder<TestGenerator> bb;

    TestFactory(Class<TestGenerator> generatorClass) {
        bb = new ByteBuddy()
                .subclass(generatorClass)
                .name("Generated__" + generatorClass.getName());
    }

    TestFactory createTestMethod(String humanReadableTestName, TestGenerator.GeneratedTest test) {
        String testMethodName = formatLegalJavaMethodName(humanReadableTestName);

        bb = bb.defineMethod(testMethodName, void.class, PUBLIC)
                .intercept(MethodDelegation.to(new TestDelegate(test)))
                .annotateMethod(AnnotationDescription.Builder.ofType(Test.class).build())
                .annotateMethod(AnnotationDescription.Builder.ofType(TestName.class).define("value", humanReadableTestName).build());

        return this;
    }

    private String formatLegalJavaMethodName(String testName) {
        String methodName = testName.toLowerCase();
        methodName = methodName.replace(' ', '_');
        methodName = methodName.replaceAll("[^a-z]", "");
        methodName = methodName + "_test_" + (++count);

        return methodName;
    }

    Class<?> buildClass() {
        long started = System.currentTimeMillis();

        try {
            return bb.make()
                    .load(getClass().getClassLoader(), WRAPPER)
                    .getLoaded();
        } finally {
            System.out.println("Building test class took " + (System.currentTimeMillis() - started) + " ms");
        }
    }

}
